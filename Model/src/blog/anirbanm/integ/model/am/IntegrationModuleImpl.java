package blog.anirbanm.integ.model.am;

import blog.anirbanm.integ.model.am.common.IntegrationModule;
import blog.anirbanm.integ.viewmodel.Employee;

import java.math.BigDecimal;

import java.sql.Array;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Struct;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jdbc.OracleConnection;

import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 06 11:27:03 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class IntegrationModuleImpl extends ApplicationModuleImpl implements IntegrationModule {
    /**
     * This is the default constructor (do not remove).
     */
    public IntegrationModuleImpl() {
    }
    
    public List<Employee> updateEmployees(final List<Employee> employees) {
        
        System.out.println("IN param: " + employees);
        Connection connection = null;
        CallableStatement stmt = null;
        
        final String sql = "BEGIN HR_PKG.P_UPD_EMPLOYEES(?, ?); END;";
        final String typeName = "EMP_TYPE";
        final String objectName = "EMP_TYPE_T";
        Object[] output = null;
        
        try {
            stmt = getDBTransaction().createCallableStatement(sql, 0);
            connection = stmt.getConnection();
            final Integer dataSize = employees.size();
            
            /**
             * @Deprecated code
             * oracle.sql.STRUCT and oracle.sql.ARRAY
             */
            /* final StructDescriptor typeDef = StructDescriptor.createDescriptor(typeName, connection);
            STRUCT[] data = new STRUCT[dataSize];
            Integer counter = 0;
            for (final Employee employee : employees) {
                final STRUCT structObject = new STRUCT(typeDef, connection, getArrayFromObject(employee));
                data[counter++] = structObject;
            }
            final ArrayDescriptor typeObj = ArrayDescriptor.createDescriptor(objectName, connection);
            final Array dataArray = new ARRAY(typeObj, connection, data); */
            
            /**
             * Updated API
             * java.sql.Struct and java.sql.Array
             */
//            Integer counter = 0;
//            EmployeeTypeTable[] data = new EmployeeTypeTable[dataSize];
//            for (final Employee employee : employees) {
//                final EmployeeTypeTable emp = new EmployeeTypeTable(employee.getEmployeeId(),
//                                                                    employee.getFirstName(), employee.getLastName());
//                System.out.println(emp);
//                data[counter++] = emp;
//            }
            OracleConnection conn = connection.unwrap(OracleConnection.class);
            // final Array dataArray = connection.createArrayOf(objectName, data);
            final Array dataArray = conn.createOracleArray(objectName, employees.toArray());
            
            stmt.setArray(1, dataArray);
            stmt.registerOutParameter(2, Types.ARRAY, objectName);
            stmt.execute();
            
            output = (Object[]) (stmt.getArray(2)).getArray();

        } catch(SQLException e) {
            e.printStackTrace();
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return buildListFromArray(output);
    }
    
    private Object[] getArrayFromObject(final Employee employee) {
        return new Object[] { employee.getEmployeeId(),
                              employee.getFirstName(),
                              employee.getLastName() };
    }
    
    private List<Employee> buildListFromArray(final Object[] input) {
        List<Employee> employees = new ArrayList<Employee>();
        if (input != null) {
            try {
                for(Object tmp : input) {
                    Struct row = (Struct) tmp;
                    Object[] attributes = row.getAttributes();
                    Employee emp = new Employee (((BigDecimal) attributes[0]), (String) attributes[1], (String) attributes[2]);
                    employees.add(emp);
                }
            } catch (Exception e) {
                ;
            }
        }
        return employees;
    }
}

